schema
  @link(url: "https://specs.apollo.dev/federation/v2.5", 
        import: ["@key", "@shareable", "@provides", "@external", "@extends"])
  @link(url: "https://specs.apollo.dev/connect/v0.3",
        import: ["@connect", "@source"]) {
  query: Query
}

@source(
  name: "bookService",
  url: "https://apollo-tracker-socrations.replit.app/api/graphql",
  http: {
    baseURL: "https://apollo-tracker-socrations.replit.app/api/graphql",
    headers: [{ name: "Authorization", value: "{context.bookAuth}" }]
  }
)

@source(
  name: "animalService",
  url: "https://apollo-animal-socrations.replit.app/graphql",
  http: {
    baseURL: "https://apollo-animal-socrations.replit.app/graphql",
    headers: [{ name: "Authorization", value: "{context.animalAuth}" }]
  }
)

@source(
  name: "movieService",
  url: "https://movie-tracker-socrations.replit.app/api/movies/search",
  http: {
    baseURL: "https://movie-tracker-socrations.replit.app/api/movies/search",
    headers: [{ name: "Authorization", value: "Bearer 12345-this-is-secret-token" }]
  }
)

@source(
  name: "smartphoneService",
  url: "https://smartphone-rest-socrations.replit.app/api/smartphones",
  http: {
    baseURL: "https://smartphone-rest-socrations.replit.app/api/smartphones",
    headers: [{ name: "Authorization", value: "Bearer 54321-this-is-secret-token" }]
  }
)

type Book @key(fields: "id") {
  id: ID!
  title: String!
  author: String!
  year: Int
}

type Animal @key(fields: "id") {
  id: ID!
  name: String!
  species: String!
  age: Int
  diet: String
  habitat: String
  health_status: String
}

type Movie @key(fields: "id") {
  id: ID!
  name: String!
  brand: String!
  year: Int!
  description: String
  imageUrl: String
}

type Smartphone @key(fields: "id") {
  id: ID!
  name: String!
  brand: String!
  year: Int!
  description: String
  price: Float
  imageUrl: String
}

type Query {
  books: [Book]
    @connect(
      source: "bookService"
      http: { 
        POST: "/"
        body: """
          query { books { id title author year } }
        """
      }
    )

  book(id: ID!): Book
    @connect(
      source: "bookService"
      http: { 
        POST: "/"
        body: """
          query($id: ID!) { book(id: $id) { id title author year } }
        """
      }
    )

  animals: [Animal]
    @connect(
      source: "animalService"
      http: { 
        POST: "/"
        body: """
          query { animals { id name species age diet habitat health_status } }
        """
      }
    )

  animal(id: ID!): Animal
    @connect(
      source: "animalService"
      http: { 
        POST: "/"
        body: """
          query($id: Int!) { animal(id: $id) { id name species age diet habitat health_status } }
        """
      }
    )

  movie(id: ID!): Movie
    @connect(
      source: "movieService"
      http: { GET: "/{args.id}" }
    )

  smartphone(id: ID!): Smartphone
    @connect(
      source: "smartphoneService"
      http: { GET: "/{args.id}" }
    )

  combinedData(bookId: ID!, animalId: ID!): CombinedResponse
  combinedData2(movieId: ID!, smartphoneId: ID!): CombinedResponse2
}

type CombinedResponse {
  book: Book
  animal: Animal
}

type CombinedResponse2 {
  movie: Movie
  smartphone: Smartphone
}